// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql, sqlite
  url      = env("DATABASE_URL")
}

model Customer {
  id             Int           @id @default(autoincrement())
  name           String
  whatsappNumber String        @unique
  orders         Order[]
  appointments   Appointment[]
  createdAt      DateTime      @default(now())
}

model Emirates {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  outlets       Outlet[]
  orders        Order[]
  drivers       DriverEmirate[]
  groceryStores GroceryStore[]
  medicalStores MedicalStore[]
}

model Cuisine {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  outlets OutletCuisine[]
  menus   Menu[]
}

model Outlet {
  id               Int               @id @default(autoincrement())
  name             String            @default("")
  emirates         Emirates          @relation(fields: [emiratesId], references: [id])
  emiratesId       Int
  whatsappNo       String            @default("")
  status           OutletStatus      @default(CLOSED)
  exactLocation    Json              @default("{\"lat\": 0.0, \"lng\": 0.0}")
  operatingHours   Json              @default("{\"open\": \"00:00\", \"close\": \"00:00\"}")
  menus            Menu[]
  orders           Order[]
  cuisines         OutletCuisine[]
  additionalPrices AdditionalPrice[]
  @@map("outlets")
}

model OutletCuisine {
  outlet     Outlet   @relation(fields: [outletId], references: [id])
  outletId   Int
  cuisine    Cuisine  @relation(fields: [cuisineId], references: [id])
  cuisineId  Int
  assignedAt DateTime @default(now())

  @@id([outletId, cuisineId])
}

model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  outlet      Outlet     @relation(fields: [outletId], references: [id])
  outletId    Int
  cuisine     Cuisine?   @relation(fields: [cuisineId], references: [id])
  cuisineId   Int?
  isActive    Boolean    @default(true)
  items       MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([outletId, cuisineId, name]) // Ensure unique menu names per outlet/cuisine
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?
  isAvailable Boolean     @default(true)
  menu        Menu        @relation(fields: [menuId], references: [id])
  menuId      Int
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id               Int                 @id @default(autoincrement())
  customer         Customer            @relation(fields: [customerId], references: [id])
  customerId       Int
  emirates         Emirates            @relation(fields: [emiratesId], references: [id])
  emiratesId       Int
  orderType        String // Can be 'Delivery', 'Self Pick-up', or 'Appointment'
  category         String // Food, Medicine, Grocery, etc.
  outlet           Outlet?             @relation(fields: [outletId], references: [id])
  outletId         Int?
  groceryStore     GroceryStore?       @relation(fields: [groceryStoreId], references: [id])
  groceryStoreId   Int?
  medicalStore     MedicalStore?       @relation(fields: [medicalStoreId], references: [id])
  medicalStoreId   Int?
  deliveryAddress  String?
  deliveryLocation String? // Store as "lat,lng" string (e.g., "6.8221635818481,80.042129516602")
  buildingType     String? // Apartment/Villa
  paymentMethod    PaymentMethod
  note             String?
  status           OrderStatus         @default(PENDING)
  statusReason     String? // Reason for status change (e.g., decline reason)
  subtotal         Decimal             @db.Decimal(10, 2)
  serviceFee       Decimal             @db.Decimal(10, 2)
  deliveryFee      Decimal             @db.Decimal(10, 2)
  vat              Decimal             @db.Decimal(10, 2)
  total            Decimal             @db.Decimal(10, 2)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  items            OrderItem[]
  groceryItems     GroceryOrderItem[]
  medicineItems    MedicineOrderItem[]
  delivery         Delivery?
  rating           Rating?
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
}

model GroceryOrderItem {
  id                Int             @id @default(autoincrement())
  order             Order           @relation(fields: [orderId], references: [id])
  orderId           Int
  groceryMenuItem   GroceryMenuItem @relation(fields: [groceryMenuItemId], references: [id])
  groceryMenuItemId Int
  quantity          Int
  price             Decimal         @db.Decimal(10, 2)
}

model MedicineOrderItem {
  id                 Int              @id @default(autoincrement())
  order              Order            @relation(fields: [orderId], references: [id])
  orderId            Int
  medicineMenuItem   MedicineMenuItem @relation(fields: [medicineMenuItemId], references: [id])
  medicineMenuItemId Int
  quantity           Int
  price              Decimal          @db.Decimal(10, 2)
  prescriptionUrl    String? // URL to uploaded prescription if required
}

enum DriverType {
  DELIVERY
  RIDE_SERVICE
}

model Driver {
  id           Int             @id @default(autoincrement())
  name         String
  phone        String          @unique
  available    Boolean         @default(true)
  driverType   DriverType      @default(DELIVERY)
  liveLocation String?         @default("") // Google Maps URL for live location
  emirates     DriverEmirate[]
  deliveries   Delivery[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model DriverEmirate {
  driver    Driver   @relation(fields: [driverId], references: [id])
  driverId  Int
  emirate   Emirates @relation(fields: [emirateId], references: [id])
  emirateId Int

  @@id([driverId, emirateId])
}

model Delivery {
  id            Int                    @id @default(autoincrement())
  order         Order                  @relation(fields: [orderId], references: [id])
  orderId       Int                    @unique
  driver        Driver?                @relation(fields: [driverId], references: [id])
  driverId      Int? // Optional driver reference
  status        String                 @default("PENDING") // Delivery status: PENDING, IN_TRANSIT, DELIVERED
  otp           String?                // OTP for delivery verification
  otpExpiresAt  DateTime?              // When the OTP expires
  riderMappings RiderDeliveryMapping[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model RiderDeliveryMapping {
  id         Int      @id @default(autoincrement())
  phone      String   @unique @default("")
  deliveryId Int      @default(0)
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
  expiresAt  DateTime @default(now())
  createdAt  DateTime @default(now())
}

model Rating {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      @unique
  rating    Int // 1â€“5
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeliveryStatus {
  ACCEPTED
  REJECTED
  DELIVERED
}

enum OrderStatus {
  PENDING // Order just created
  PREPARING // Outlet accepted and preparing the order
  READY // Order is ready for pickup/delivery
  COMPLETED // Order successfully delivered/picked up
  CANCELLED // Order was cancelled
  DECLINED // Outlet declined the order
}

enum PaymentMethod {
  COD
  POS
  ANY
}

enum OutletStatus {
  OPEN
  BUSY
  CLOSED
}

model AdditionalPrice {
  id        Int      @id @default(autoincrement())
  name      String   @default("")
  value     Decimal  @default(0) @db.Decimal(10, 5)
  type      String   @default("fixed") // 'percentage' or 'fixed'
  isActive  Boolean  @default(true)
  outlet    Outlet?  @relation(fields: [outletId], references: [id], onDelete: Cascade)
  outletId  Int?
  groceryStore   GroceryStore? @relation(fields: [groceryStoreId], references: [id], onDelete: Cascade)
  groceryStoreId Int?
  medicalStore   MedicalStore? @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)
  medicalStoreId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([outletId])
  @@index([groceryStoreId])
  @@index([medicalStoreId])
}

// Grocery Store Models
model GroceryStore {
  id             Int           @id @default(autoincrement())
  name           String
  emirates       Emirates      @relation(fields: [emiratesId], references: [id])
  emiratesId     Int
  whatsappNo     String
  status         OutletStatus
  exactLocation  Json          @default("{\"lat\": 0.0, \"lng\": 0.0}")
  operatingHours Json          @default("{\"open\": \"00:00\", \"close\": \"00:00\"}")
  menus          GroceryMenu[]
  orders         Order[]
  additionalPrices AdditionalPrice[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model GroceryMenu {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  store       GroceryStore      @relation(fields: [storeId], references: [id])
  storeId     Int
  isActive    Boolean           @default(true)
  items       GroceryMenuItem[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([storeId, name]) // Ensure unique menu names per store
}

model GroceryMenuItem {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  price       Decimal            @db.Decimal(10, 2)
  imageUrl    String?
  isAvailable Boolean            @default(true)
  menu        GroceryMenu        @relation(fields: [menuId], references: [id])
  menuId      Int
  orderItems  GroceryOrderItem[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

// Medical Store Models
model MedicalStore {
  id             Int            @id @default(autoincrement())
  name           String
  emirates       Emirates       @relation(fields: [emiratesId], references: [id])
  emiratesId     Int
  whatsappNo     String
  status         OutletStatus
  exactLocation  Json           @default("{\"lat\": 0.0, \"lng\": 0.0}")
  operatingHours Json           @default("{\"open\": \"00:00\", \"close\": \"00:00\"}")
  menus          MedicineMenu[]
  orders         Order[]
  additionalPrices AdditionalPrice[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MedicineMenu {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  store       MedicalStore       @relation(fields: [storeId], references: [id])
  storeId     Int
  isActive    Boolean            @default(true)
  items       MedicineMenuItem[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([storeId, name]) // Ensure unique menu names per store
}

model MedicineMenuItem {
  id                   Int                 @id @default(autoincrement())
  name                 String
  description          String?
  price                Decimal             @db.Decimal(10, 2)
  imageUrl             String?
  isAvailable          Boolean             @default(true)
  requiresPrescription Boolean             @default(false)
  menu                 MedicineMenu        @relation(fields: [menuId], references: [id])
  menuId               Int
  orderItems           MedicineOrderItem[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

// Appointment Models
model AppointmentType {
  id          Int                @id @default(autoincrement())
  name        String             @unique // Salon, Medical Centre, Legal Advisor, Restaurant
  description String? // Optional description of the appointment type
  places      AppointmentPlace[] // Relation to appointment places
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model AppointmentPlace {
  id                      Int             @id @default(autoincrement())
  name                    String // Name of the specific place/provider
  appointmentType         AppointmentType @relation(fields: [appointmentTypeId], references: [id])
  appointmentTypeId       Int
  specialistNames         String[]        @default([]) // Zero or more specialists
  whatsappNo              String // WhatsApp number for the service provider
  status                  String          @default("ACTIVE") // ACTIVE, INACTIVE
  exactLocation           Json            @default("{\"lat\": 0.0, \"lng\": 0.0}")
  address                 String
  appointments            Appointment[]
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  @@unique([appointmentTypeId, name]) // Ensure unique place names per appointment type
}

model Appointment {
  id                 Int              @id @default(autoincrement())
  customer           Customer         @relation(fields: [customerId], references: [id])
  customerId         Int
  appointmentPlace   AppointmentPlace @relation(fields: [appointmentPlaceId], references: [id])
  appointmentPlaceId Int
  appointmentDate    DateTime
  status             String           @default("SCHEDULED") // PENDING, SCHEDULED, COMPLETED, CANCELLED
  numberOfGuests     Int?             // Optional: only applicable for Restaurant reservations
  appointmentSetter  String?          // Optional: name/identifier of who set the appointment
  specialistName     String?          // Optional: name of the specialist
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

// Authentication Models
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  role      UserRole  @default(VIEWER)
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  apiKeys   ApiKey[]
}

model ApiKey {
  id         Int       @id @default(autoincrement())
  key        String    @unique
  name       String
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  revoked    Boolean   @default(false)
  lastUsedAt DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  VIEWER
}
